"""
Django settings for countries_project project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Load environment variables from .env file
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass  # python-dotenv not installed, will use system environment variables

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-to16y0e06xuul&tspfvqncr&k&4ct1wj1aw9^ydyjyc!58ml4z')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'countries',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'countries_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'countries_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# MySQL Configuration with SQLite fallback
USE_MYSQL = os.getenv('USE_MYSQL', 'True').lower() == 'true'
DATABASE_URL = os.getenv('DATABASE_URL', None)

if USE_MYSQL:
    # Try to use MySQL with Aiven credentials
    try:
        import pymysql
        pymysql.install_as_MySQLdb()
        
        # Option 1: Use DATABASE_URL if provided
        if DATABASE_URL:
            try:
                import dj_database_url
                DATABASES = {
                    'default': dj_database_url.config(
                        default=DATABASE_URL,
                        conn_max_age=600,
                        ssl_require=True
                    )
                }
                print("‚úÖ Using MySQL database (from DATABASE_URL)")
            except ImportError:
                # If dj-database-url is not installed, parse manually
                print("‚ö†Ô∏è dj-database-url not installed, using individual credentials")
                DATABASES = {
                    'default': {
                        'ENGINE': 'django.db.backends.mysql',
                        'NAME': os.getenv('DB_NAME', 'defaultdb'),
                        'USER': os.getenv('DB_USER', 'avnadmin'),
                        'PASSWORD': os.getenv('DB_PASSWORD', ''),
                        'HOST': os.getenv('DB_HOST', 'mysql-countries2-contries-currency1.d.aivencloud.com'),
                        'PORT': os.getenv('DB_PORT', '18360'),
                        'OPTIONS': {
                            'ssl': {
                                'ssl-mode': 'REQUIRED',
                            },
                            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
                        },
                    }
                }
                print("‚úÖ Using MySQL database (from individual credentials)")
        else:
            # Option 2: Use individual credentials
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.mysql',
                    'NAME': os.getenv('DB_NAME', 'defaultdb'),
                    'USER': os.getenv('DB_USER', 'avnadmin'),
                    'PASSWORD': os.getenv('DB_PASSWORD', ''),
                    'HOST': os.getenv('DB_HOST', 'mysql-countries2-contries-currency1.d.aivencloud.com'),
                    'PORT': os.getenv('DB_PORT', '18360'),
                    'OPTIONS': {
                        'ssl': {
                            'ssl-mode': 'REQUIRED',
                        },
                        'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
                    },
                }
            }
            print("‚úÖ Using MySQL database (from individual credentials)")
    except (ImportError, Exception) as e:
        print(f"‚ö†Ô∏è MySQL connection failed: {e}")
        print("üîÑ Falling back to SQLite")
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
else:
    # Use SQLite (default for development)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
    print("‚ÑπÔ∏è Using SQLite database (set USE_MYSQL=True to use MySQL)")
#
# If an Aiven CA certificate is provided via env var (SSL_CA) or path (SSL_CA_PATH),
# write the PEM to a file (if provided as env) and configure DB SSL options so
# PyMySQL/mysqlclient can verify the server certificate.
SSL_CA_ENV = os.getenv('SSL_CA')  # PEM contents (multi-line) if provided
SSL_CA_PATH = os.getenv('SSL_CA_PATH')  # Path on disk where CA PEM is available

if SSL_CA_ENV and not SSL_CA_PATH:
    # write the provided PEM to a file under BASE_DIR/secrets/aiven-ca.pem
    secret_dir = os.path.join(BASE_DIR, 'secrets')
    os.makedirs(secret_dir, exist_ok=True)
    ca_file = os.path.join(secret_dir, 'aiven-ca.pem')
    with open(ca_file, 'w', encoding='utf-8') as f:
        f.write(SSL_CA_ENV)
    SSL_CA_PATH = ca_file

# If we have a CA path and are using MySQL, attach it to DATABASES options
if USE_MYSQL and os.getenv('USE_MYSQL', 'True').lower() == 'true' and SSL_CA_PATH:
    try:
        default_db = globals().get('DATABASES', {}).get('default', {})
        engine = default_db.get('ENGINE', '')
        if engine and 'mysql' in engine:
            opts = default_db.setdefault('OPTIONS', {})
            ssl_opts = opts.get('ssl', {}) if isinstance(opts.get('ssl', {}), dict) else {}
            # set 'ca' which PyMySQL and mysqlclient accept
            ssl_opts['ca'] = SSL_CA_PATH
            # keep existing ssl-mode if present
            opts['ssl'] = ssl_opts
            default_db['OPTIONS'] = opts
            DATABASES['default'] = default_db
    except Exception:
        # avoid crashing settings; log to stdout for debugging
        print('‚ö†Ô∏è Could not attach SSL CA to DATABASES options')

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Whitenoise configuration for static files
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework configuration
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
}

# Security settings for production
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
